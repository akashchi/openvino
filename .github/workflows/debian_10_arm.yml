name: Debian 10 ARM
on:
  workflow_dispatch:
  pull_request:
  merge_group:
  push:
    branches:
      - master
      - 'releases/**'

concurrency:
  # github.ref is not unique in post-commit
  group: ${{ github.event_name == 'push' && github.run_id || github.ref }}-debian-10-arm
  cancel-in-progress: true

permissions: read-all

jobs:
  Smart_CI:
    runs-on: ubuntu-latest
    outputs:
      affected_components: "${{ steps.smart_ci.outputs.affected_components }}"
      changed_components: "${{ steps.smart_ci.outputs.changed_components }}"
      skip_workflow: "${{ steps.smart_ci.outputs.skip_workflow }}"
    steps:
      - name: checkout action
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          sparse-checkout: .github/actions/smart-ci

      - name: Get affected components
        id: smart_ci
        uses: ./.github/actions/smart-ci
        with:
          repository: ${{ github.repository }}
          pr: ${{ github.event.number }}
          commit_sha: ${{ github.sha }}
          ref_name: ${{ github.ref_name }}
          component_pattern: "category: (.*)"
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          skip_when_only_listed_labels_set: 'docs'
          skip_when_only_listed_files_changed: '*.md,*.rst,*.png,*.jpg,*.svg,*/layer_tests_summary/*,*/conformance/*'

      - name: Show affected components
        run: |
          echo "${{ toJSON(steps.smart_ci.outputs.affected_components) }}"
        shell: bash

  Docker:
    needs: Smart_CI
    runs-on: aks-linux-16-cores-arm-docker-build
    container:
      image: openvinogithubactions.azurecr.io/docker_build:0.2
      volumes:
        - /mount:/mount
    outputs:
      images: "${{ steps.handle_docker.outputs.images }}"
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - uses: ./.github/actions/handle_docker
        id: handle_docker
        with:
          images: |
            ov_build/debian_10_arm
          registry: 'openvinogithubactions.azurecr.io'
          dockerfiles_root_dir: '.github/dockerfiles'
          changed_components: ${{ needs.smart_ci.outputs.changed_components }}

  Build:
    needs: [Docker, Smart_CI]
    if: "!needs.smart_ci.outputs.skip_workflow"
    uses: ./.github/workflows/job_build_linux.yml
    with:
      runner: 'aks-linux-16-cores-arm'
      container: '{"image": "${{ fromJSON(needs.docker.outputs.images).ov_build.debian_10_arm }}", "volumes": ["/mount:/mount"], "options": "-e SCCACHE_AZURE_BLOB_CONTAINER -e SCCACHE_AZURE_CONNECTION_STRING"}'
      affected-components: ${{ needs.smart_ci.outputs.affected_components }}
      event-name: ${{ github.event_name }}
      os: 'debian_10'
      arch: 'arm'
      cmake-options: >-
            -DCMAKE_TOOLCHAIN_FILE=${OPENVINO_REPO}/cmake/arm.toolchain.cmake \
            -DTHREADS_PTHREAD_ARG="-pthread" \
            -DCMAKE_COMPILE_WARNING_AS_ERROR=OFF \
            -DENABLE_STRICT_DEPENDENCIES=OFF \
            -DCMAKE_VERBOSE_MAKEFILE=ON \
            -DENABLE_CONFORMANCE_PGQL=ON \
            -DENABLE_LTO=ON \
            -DENABLE_TESTS=ON \
            -DENABLE_PYTHON=OFF
#  Build:
#    needs: [ Smart_CI, Docker ]
#    timeout-minutes: 150
#    defaults:
#      run:
#        shell: bash
#    runs-on: 'aks-linux-16-cores-arm'
#    container:
#      image: ${{ fromJSON(needs.docker.outputs.images).ov_build.debian_10 }}
#      volumes:
#        - /mount:/mount
#      options: -e SCCACHE_AZURE_BLOB_CONTAINER -e SCCACHE_AZURE_CONNECTION_STRING
#    env:
#      CMAKE_BUILD_TYPE: 'Release'
#      CMAKE_CXX_COMPILER_LAUNCHER: sccache
#      CMAKE_C_COMPILER_LAUNCHER: sccache
#      SCCACHE_IGNORE_SERVER_IO_ERROR: 1
#      SCCACHE_SERVER_PORT: 35555
#      SCCACHE_ERROR_LOG: /__w/openvino/sccache_log.txt
#      SCCACHE_LOG: warn
#      GITHUB_WORKSPACE: '/__w/openvino/openvino'
#      OPENVINO_REPO: /__w/openvino/openvino/openvino
#      INSTALL_DIR: /__w/openvino/openvino/openvino_install
#      INSTALL_TEST_DIR: /__w/openvino/openvino/tests_install
#      BUILD_DIR: /__w/openvino/openvino/openvino_build
#      SCCACHE_AZURE_KEY_PREFIX: 'debian_10_arm_Release'
#    if: "!needs.smart_ci.outputs.skip_workflow"
#
#    steps:
#      - name: Clone OpenVINO
#        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
#        with:
#          path: ${{ env.OPENVINO_REPO }}
#          submodules: 'true'
#
#      #
#      # Print system info
#      #
#
#      - name: System info
#        uses: ./openvino/.github/actions/system_info
#
#      #
#      # Dependencies
#      #
#
#      - name: Install python dependencies
#        run: |
#          python3 -m pip install -r ${OPENVINO_REPO}/tools/mo/requirements.txt
#          python3 -m pip install -r ${OPENVINO_REPO}/src/bindings/python/requirements_test.txt
#          python3 -m pip install -r ${OPENVINO_REPO}/src/bindings/python/wheel/requirements-dev.txt
#
#      #
#      # Build
#      #
#
#      - name: CMake configure - OpenVINO
#        run: |
#          cmake \
#            -DCMAKE_TOOLCHAIN_FILE=${OPENVINO_REPO}/cmake/arm.toolchain.cmake \
#            -DTHREADS_PTHREAD_ARG="-pthread" \
#            -DCMAKE_COMPILE_WARNING_AS_ERROR_DEFAULT=OFF \
#            -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }} \
#            -DENABLE_STRICT_DEPENDENCIES=OFF \
#            -DCMAKE_VERBOSE_MAKEFILE=ON \
#            -DENABLE_CONFORMANCE_PGQL=ON \
#            -DENABLE_LTO=ON \
#            -DENABLE_TESTS=ON \
#            -DENABLE_PYTHON=OFF \
#            -DCMAKE_CXX_COMPILER_LAUNCHER=${{ env.CMAKE_CXX_COMPILER_LAUNCHER }} \
#            -DCMAKE_C_COMPILER_LAUNCHER=${{ env.CMAKE_C_COMPILER_LAUNCHER }} \
#            -S ${OPENVINO_REPO} \
#            -B ${BUILD_DIR}
#
#      - name: Clean sccache stats
#        run: ${SCCACHE_PATH} --zero-stats
#
#      - name: Cmake build - OpenVINO
#        run: cmake --build ${BUILD_DIR} --parallel --config ${{ env.CMAKE_BUILD_TYPE }}
#
#      - name: Show sccache stats
#        run: ${SCCACHE_PATH} --show-stats
#
#      - name: Cmake install - OpenVINO
#        run: |
#          cmake -DCMAKE_INSTALL_PREFIX=${INSTALL_DIR} -P ${BUILD_DIR}/cmake_install.cmake
#          cmake -DCMAKE_INSTALL_PREFIX=${INSTALL_TEST_DIR} -DCOMPONENT=tests -P ${BUILD_DIR}/cmake_install.cmake
#
#      - name: Pack Artifacts
#        run: |
#          pushd ${INSTALL_DIR}
#            tar -czvf ${BUILD_DIR}/openvino_package.tar.gz *
#          popd
#
#          pushd ${INSTALL_TEST_DIR}
#            tar -czvf ${BUILD_DIR}/openvino_tests.tar.gz *
#          popd
#
#      #
#      # Upload build artifacts and logs
#      #
#      - name: Upload build logs
#        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
#        if: always()
#        with:
#          name: build_logs
#          path: ${{ env.SCCACHE_ERROR_LOG }}
#          if-no-files-found: 'ignore'
#
#      - name: Upload openvino package
#        if: ${{ always() }}
#        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
#        with:
#          name: openvino_package
#          path: ${{ env.BUILD_DIR }}/openvino_package.tar.gz
#          if-no-files-found: 'error'
#
#      - name: Upload openvino tests package
#        if: ${{ always() }}
#        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
#        with:
#          name: openvino_tests
#          path: ${{ env.BUILD_DIR }}/openvino_tests.tar.gz
#          if-no-files-found: 'error'

  Overall_Status:
    name: ci/gha_overall_status_debian_10_arm
    needs: [Smart_CI, Build]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - name: Check status of all jobs
        if: >-
          ${{
            contains(needs.*.result, 'failure') ||
            contains(needs.*.result, 'cancelled')
          }}
        run: exit 1
