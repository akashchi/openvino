name: Tests on Mac (macOS 12, Python 3.11)
on:
  workflow_dispatch:
  pull_request:
    paths-ignore:
      - '**/docs/**'
      - 'docs/**'
      - '**/**.md'
      - '**.md'
      - '**/layer_tests_summary/**'
      - '**/conformance/**'
  push:
    paths-ignore:
      - '**/docs/**'
      - 'docs/**'
      - '**/**.md'
      - '**.md'
      - '**/layer_tests_summary/**'
      - '**/conformance/**'
    branches:
      - master
      - 'releases/**'

concurrency:
  # github.ref is not unique in post-commit
  group: ${{ github.event_name == 'push' && github.run_id || github.ref }}-mac
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.11'

jobs:
  Build:
    defaults:
      run:
        shell: bash
    runs-on: macos-12-large
    env:
      CMAKE_BUILD_TYPE: 'Release'
      CMAKE_GENERATOR: 'Ninja Multi-Config'
      CMAKE_OSX_DEPLOYMENT_TARGET: '11.0'
      CMAKE_CXX_COMPILER_LAUNCHER: ccache
      CMAKE_C_COMPILER_LAUNCHER: ccache
      OPENVINO_REPO: ${{ github.workspace }}/openvino
      OPENVINO_CONTRIB_REPO: ${{ github.workspace }}/openvino_contrib
      INSTALL_DIR: ${{ github.workspace }}/openvino_install
      INSTALL_TEST_DIR: ${{ github.workspace }}/tests_install
      SAMPLES_INSTALL_DIR: ${{ github.workspace }}/install/samples
      LAYER_TESTS_INSTALL_DIR: ${{ github.workspace }}/install/tests/layer_tests
      BUILD_DIR: ${{ github.workspace }}/build
      OV_TEMP: ${{ github.workspace }}/openvino_temp
    steps:
      - name: Clone OpenVINO
        uses: actions/checkout@v4
        with:
          path: 'openvino'
          submodules: 'recursive'

      - name: Clone OpenVINO Contrib
        uses: actions/checkout@v4
        with:
          repository: 'openvinotoolkit/openvino_contrib'
          path: 'openvino_contrib'
          submodules: 'recursive'

      #
      # Dependencies
      #

      - name: Install build dependencies
        run: |
          brew install ninja
          brew install coreutils

      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install python dependencies
        run: |
          # For Python API
          python3 -m pip install --upgrade pip
          python3 -m pip install Scons
          python3 -m pip install -r ${{ env.OPENVINO_REPO }}/src/bindings/python/wheel/requirements-dev.txt
          python3 -m pip install -r ${{ env.OPENVINO_REPO }}/src/bindings/python/requirements.txt
          python3 -m pip install -r ${{ env.OPENVINO_REPO }}/src/bindings/python/requirements_test.txt

          # For running Python API tests
          python3 -m pip install -r ${{ env.OPENVINO_REPO }}/src/bindings/python/src/compatibility/openvino/requirements-dev.txt

          # For running ONNX frontend unit tests
          python3 -m pip install --force-reinstall -r ${{ env.OPENVINO_REPO }}/src/frontends/onnx/tests/requirements.txt

          # For running TensorFlow frontend unit tests
          python3 -m pip install -r ${{ env.OPENVINO_REPO }}/src/frontends/tensorflow/tests/requirements.txt

          # For running Paddle frontend unit tests
          python3 -m pip install -r ${{ env.OPENVINO_REPO }}/src/frontends/paddle/tests/requirements.txt

      - name: Install MO dependencies
        run: |
          python3 -m pip install -r ${{ env.OPENVINO_REPO }}/tools/mo/requirements_mxnet.txt
          python3 -m pip install -r ${{ env.OPENVINO_REPO }}/tools/mo/requirements_caffe.txt
          python3 -m pip install -r ${{ env.OPENVINO_REPO }}/tools/mo/requirements_kaldi.txt
          python3 -m pip install -r ${{ env.OPENVINO_REPO }}/tools/mo/requirements_onnx.txt
          python3 -m pip install -r ${{ env.OPENVINO_REPO }}/tools/mo/requirements_tf2.txt
          python3 -m pip install -r ${{ env.OPENVINO_REPO }}/tools/mo/requirements_dev.txt

      #
      # Build
      #

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          max-size: "2000M"
          # Should save cache only if run in the master branch of the base repo
          # github.ref_name is 'ref/PR_#' in case of the PR, and 'branch_name' when executed on push
          # save: ${{ github.ref_name == 'master' && 'true' || 'false'  }}
          verbose: 2
          key: ${{ runner.os }}-main
          restore-keys: |
            ${{ runner.os }}-main

      - name: CMake configure
        run: |
          cmake \
            -G "${{ env.CMAKE_GENERATOR }}" \
            -DENABLE_CPPLINT=OFF \
            -DENABLE_NCC_STYLE=OFF \
            -DENABLE_TESTS=ON \
            -DENABLE_PYTHON=ON \
            -DCMAKE_VERBOSE_MAKEFILE=ON \
            -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }} \
            -DBUILD_SHARED_LIBS=ON \
            -DENABLE_ONEDNN_FOR_GPU=OFF \
            -DENABLE_OV_ONNX_FRONTEND=ON \
            -DCMAKE_COMPILE_WARNING_AS_ERROR=OFF \
            -DENABLE_STRICT_DEPENDENCIES=OFF \
            -DCMAKE_CXX_COMPILER_LAUNCHER=${{ env.CMAKE_CXX_COMPILER_LAUNCHER }} \
            -DCMAKE_C_COMPILER_LAUNCHER=${{ env.CMAKE_C_COMPILER_LAUNCHER }} \
            -DENABLE_SYSTEM_SNAPPY=ON \
            -DENABLE_SYSTEM_TBB=ON \
            -DENABLE_DEBUG_CAPS=ON \
            -S ${{ env.OPENVINO_REPO }} \
            -B ${{ env.BUILD_DIR }}

      - name: Cmake build - OpenVINO
        run: cmake --build ${{ env.BUILD_DIR }} --parallel --config ${{ env.CMAKE_BUILD_TYPE }}

      - name: Show ccache stats
        run: ccache --show-stats

      - name: Cmake install - OpenVINO
        run: |
          cmake -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }} -P ${{ env.BUILD_DIR }}/cmake_install.cmake
          cmake -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_TEST_DIR }} -DCOMPONENT=tests -P ${{ env.BUILD_DIR }}/cmake_install.cmake
          cmake -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }} -DCOMPONENT=python_wheels -P ${{ env.BUILD_DIR }}/cmake_install.cmake      

      - name: Pack Artifacts
        run: |
          pushd ${{ env.INSTALL_DIR }}
            tar -czvf ${{ env.BUILD_DIR }}/openvino_package.tar.gz --exclude=tests *
          popd

          pushd ${{ env.INSTALL_TEST_DIR }}
            tar -czvf ${{ env.BUILD_DIR }}/openvino_tests.tar.gz tests/
          popd

      - name: Cmake & Build - OpenVINO Contrib
        run: |
          cmake \
            -DBUILD_nvidia_plugin=OFF \
            -DCUSTOM_OPERATIONS="calculate_grid;complex_mul;fft;grid_sample;sparse_conv;sparse_conv_transpose" \
            -DOPENVINO_EXTRA_MODULES=${{ env.OPENVINO_CONTRIB_REPO }}/modules \
            -S ${{ env.OPENVINO_REPO }} \
            -B ${{ env.BUILD_DIR }}
          cmake --build ${{ env.BUILD_DIR }} --parallel --config ${{ env.CMAKE_BUILD_TYPE }}
      #      - name: Cmake Layer Tests
#        run: cmake -GNinja -S ${{ env.OPENVINO_REPO }}/tests/layer_tests -B ${{ env.BUILD_DIR }}/layer_tests
#
#      - name: Build Layer Tests
#        run: cmake --build ${{ env.BUILD_DIR }}/layer_tests --parallel --config Release
#
#      - name: Install wheel packages
#        run: cmake -DCOMPONENT=python_wheels -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }} -P ${{ env.BUILD_DIR }}/cmake_install.cmake
#
#      - name: Install Layer Tests
#        run: cmake -DCOMPONENT=tests -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }} -P ${{ env.BUILD_DIR }}/layer_tests/cmake_install.cmake
#
#      - name: Install python wheels
#        run: python3 -m pip install openvino-dev --find-links=${{ env.INSTALL_DIR }}/tools
#
#      - name: Install tests
#        run: cmake -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }} -DCOMPONENT=tests -P ${{ env.BUILD_DIR }}/cmake_install.cmake
#
#      - name: Install OpenVINO
#        run: cmake -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }} -P ${{ env.BUILD_DIR }}/cmake_install.cmake
#
#      - name: CMake Samples Tests
#        run: cmake -GNinja -S ${{ env.OPENVINO_REPO }}/tests/samples_tests -B ${{ env.BUILD_DIR }}/samples_tests
#
#      - name: Build Samples Tests
#        run: cmake --build ${{ env.BUILD_DIR }}/samples_tests --config Release
#
#      - name: Install Samples Tests
#        run: cmake -DCOMPONENT=tests -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }} -P ${{ env.BUILD_DIR }}/samples_tests/cmake_install.cmake
#

#
#      - name: Build cpp samples
#        run: |
#          source ${{ env.INSTALL_DIR }}/setupvars.sh
#          ${{ env.SAMPLES_INSTALL_DIR }}/cpp/build_samples.sh -i ${{ env.INSTALL_DIR }} -b ${{ env.BUILD_DIR }}/cpp_samples
#
#      - name: Build c samples
#        run: |
#          source ${{ env.INSTALL_DIR }}/setupvars.sh
#          ${{ env.SAMPLES_INSTALL_DIR }}/c/build_samples.sh -i ${{ env.INSTALL_DIR }} -b ${{ env.BUILD_DIR }}/c_samples
#
#      #
#      # Tests
#      #
#
#      - name: Samples tests
#        run: |
#          python3 -m pip install --ignore-installed PyYAML -r ${{ env.INSTALL_TEST_DIR }}/smoke_tests/requirements.txt
#          export LD_LIBRARY_PATH=${{ env.IE_APP_PATH }}:$LD_LIBRARY_PATH
#
#          source ${{ env.INSTALL_DIR }}/setupvars.sh
#
#          # Ignore "test_speech_sample.py" as GNA is not available on the Mac GH Runners
#          python3 -m pytest -sv ${{ env.INSTALL_TEST_DIR }}/smoke_tests \
#            --env_conf ${{ env.INSTALL_TEST_DIR }}/smoke_tests/env_config.yml \
#            --ignore=${{ env.INSTALL_TEST_DIR }}/smoke_tests/test_speech_sample.py \
#            --junitxml=${{ env.INSTALL_TEST_DIR }}/TEST-SamplesSmokeTests.xml
#        env:
#          IE_APP_PATH: ${{ env.INSTALL_DIR }}/samples_bin
#          IE_APP_PYTHON_PATH: ${{ env.INSTALL_DIR }}/samples/python
#          SHARE: ${{ env.INSTALL_TEST_DIR }}/smoke_tests/samples_smoke_tests_data
#          WORKSPACE: ${{ env.INSTALL_DIR }}
#
#      # Present in the "Build" job due to the fact that these tests require build directory
#      - name: ONNX frontend tests
#        if: ${{ always() }}
#        run: |
#          source ${{ env.INSTALL_DIR }}/setupvars.sh
#          ${{ env.INSTALL_TEST_DIR }}/ov_onnx_frontend_tests --gtest_print_time=1 --gtest_filter=-*IE_GPU*:*FrontEndLoadFromTest.testLoadFromTwoStreams*:*FrontEndLoadFromTest.testLoadFromTwoFiles* \
#                --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-ONNXFrontend.xml

      #
      # Upload build artifacts
      #

      - name: Upload openvino package
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: openvino_package
          path: ${{ env.BUILD_DIR }}/openvino_package.tar.gz
          if-no-files-found: 'error'

      - name: Upload openvino tests package
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: openvino_tests
          path: ${{ env.BUILD_DIR }}/openvino_tests.tar.gz
          if-no-files-found: 'error'

  Samples:
    needs: Build
    defaults:
      run:
        shell: bash
    runs-on: macos-12
    env:
      INSTALL_DIR: ${{ github.workspace }}/install
      INSTALL_TEST_DIR: ${{ github.workspace }}/install/tests
      BUILD_DIR: ${{ github.workspace }}/build

    steps:
      - name: Create Directories
        run: mkdir -p ${{ env.INSTALL_DIR }} ${{ env.INSTALL_TEST_DIR }}

      #
      # Initialize OpenVINO
      #

      - name: Download OpenVINO package
        uses: actions/download-artifact@v3
        with:
          name: openvino_package
          path: ${{ env.INSTALL_DIR }}

      - name: Download OpenVINO tests package
        uses: actions/download-artifact@v3
        with:
          name: openvino_tests
          path: ${{ env.INSTALL_TEST_DIR }}

      - name: Extract OpenVINO packages
        run: |
          pushd ${{ env.INSTALL_DIR }}
            tar -xzf openvino_package.tar.gz -C ${{ env.INSTALL_DIR }}
          popd
          
          pushd ${{ env.INSTALL_TEST_DIR }}
            tar -xzf openvino_tests.tar.gz -C ${{ env.INSTALL_DIR }}
          popd

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Build cpp samples - GCC
        run: ${INSTALL_DIR}/samples/cpp/build_samples.sh -i ${INSTALL_DIR} -b ${BUILD_DIR}/cpp_samples
        env:
          CMAKE_COMPILE_WARNING_AS_ERROR: 'ON'

      - name: Build cpp samples - Clang
        run: |
          apt-get install -y clang
          ${INSTALL_DIR}/samples/cpp/build_samples.sh -i ${INSTALL_DIR} -b ${BUILD_DIR}/cpp_samples_clang
        env:
          CMAKE_COMPILE_WARNING_AS_ERROR: 'ON'
          CC: clang
          CXX: clang++

      - name: Build c samples
        run: ${INSTALL_DIR}/samples/c/build_samples.sh -i ${INSTALL_DIR} -b ${BUILD_DIR}/c_samples
        env:
          CMAKE_COMPILE_WARNING_AS_ERROR: 'ON'

      #
      # Tests
      #

      - name: Samples tests
        run: |
          export WORKSPACE=${INSTALL_DIR}
          export IE_APP_PATH=${INSTALL_DIR}/samples_bin
          export IE_APP_PYTHON_PATH=${INSTALL_DIR}/samples/python
          export SHARE=${INSTALL_TEST_DIR}/smoke_tests/samples_smoke_tests_data

          python3 -m pip install --ignore-installed PyYAML -r ${INSTALL_TEST_DIR}/smoke_tests/requirements.txt
          export LD_LIBRARY_PATH=${IE_APP_PATH}:$LD_LIBRARY_PATH

          source ${INSTALL_DIR}/setupvars.sh

          python3 -m pytest -sv ${INSTALL_TEST_DIR}/smoke_tests \
            --env_conf ${INSTALL_TEST_DIR}/smoke_tests/env_config.yml \
            --junitxml=${INSTALL_TEST_DIR}/TEST-SamplesSmokeTests.xml

      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        if: ${{ !cancelled() }}
        with:
          name: test-results-cpp
          path: ${{ env.INSTALL_TEST_DIR }}/TEST*.xml
          if-no-files-found: 'error'

  CXX_Unit_Tests:
    needs: Build
    defaults:
      run:
        shell: bash
    runs-on: macos-12
    env:
      INSTALL_DIR: ${{ github.workspace }}/install
      INSTALL_TEST_DIR: ${{ github.workspace }}/install/tests

    steps:
      - name: Create Directories
        run: |
          mkdir -p ${{ env.INSTALL_DIR }} ${{ env.INSTALL_TEST_DIR }}

      #
      # Dependencies
      #

#      - name: Install dependencies
#        run: |
#          sudo -E apt update
#          sudo -E apt --assume-yes install openjdk-11-jdk libbz2-dev clang unzip libpugixml-dev libtbb-dev intel-opencl-icd ocl-icd-opencl-dev opencl-headers

      - name: Download OpenVINO package
        uses: actions/download-artifact@v3
        with:
          name: openvino_package
          path: ${{ env.INSTALL_DIR }}

      - name: Download OpenVINO tests package
        uses: actions/download-artifact@v3
        with:
          name: openvino_tests
          path: ${{ env.INSTALL_TEST_DIR }}

      - name: Extract OpenVINO packages
        run: |
          pushd ${{ env.INSTALL_DIR }}
            tar -xzf openvino_package.tar.gz -C ${{ env.INSTALL_DIR }} && rm openvino_package.tar.gz || exit 1
          popd
          pushd ${{ env.INSTALL_TEST_DIR }}
            tar -xzf openvino_tests.tar.gz -C ${{ env.INSTALL_DIR }} && rm openvino_tests.tar.gz || exit 1
          popd

      #
      # Tests
      #

      - name: OpenVINO Core Unit Tests
        if: ${{ always() }}
        run: |
          source ${{ env.INSTALL_DIR }}/setupvars.sh
          ${{ env.INSTALL_TEST_DIR }}/ov_core_unit_tests --gtest_print_time=1 --gtest_filter=-*IE_GPU* \
                --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-NGraphUT.xml

      - name: OpenVINO Inference Functional Tests
        if: ${{ always() }}
        run: |
          source ${{ env.INSTALL_DIR }}/setupvars.sh
          ${{ env.INSTALL_TEST_DIR }}/ov_inference_functional_tests --gtest_print_time=1 \
                --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-InferenceFunc.xml

      - name: OpenVINO Inference Unit Tests
        if: ${{ always() }}
        run: |
          source ${{ env.INSTALL_DIR }}/setupvars.sh
          ${{ env.INSTALL_TEST_DIR }}/ov_inference_unit_tests --gtest_print_time=1 \
                --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-InferenceUnit.xml

      - name: Low Precision Transformations Tests
        if: ${{ always() }}
        run: |
          source ${{ env.INSTALL_DIR }}/setupvars.sh
          ${{ env.INSTALL_TEST_DIR }}/ov_lp_transformations_tests --gtest_print_time=1 \
                --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-LpTransformations.xml

      - name: OpenVINO Conditional compilation tests
        if: ${{ always() }}
        run: |
          source ${{ env.INSTALL_DIR }}/setupvars.sh
          ${{ env.INSTALL_TEST_DIR }}/ov_conditional_compilation_tests --gtest_print_time=1 \
                --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-ConditionalCompilation.xml

      - name: IR frontend tests
        if: ${{ always() }}
        run: |
          source ${{ env.INSTALL_DIR }}/setupvars.sh
          ${{ env.INSTALL_TEST_DIR }}/ov_ir_frontend_tests --gtest_print_time=1 \
                --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-IRFrontend.xml

      # Disabled in Azure: https://github.com/openvinotoolkit/openvino/blob/master/.ci/azure/linux.yml#L403
      # - name: PaddlePaddle frontend tests
      #   run: |
      #     source ${{ env.INSTALL_DIR }}/setupvars.sh
      #     ${{ env.INSTALL_TEST_DIR }}/paddle_tests --gtest_print_time=1 --gtest_filter=*smoke* \
      #           --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-PaddleTests.xml

      # Present in the "Build" job as these tests require build directory
      # - name: ONNX frontend tests
      #   run: |
      #     source ${{ env.INSTALL_DIR }}/setupvars.sh
      #     ${{ env.INSTALL_TEST_DIR }}/ov_onnx_frontend_tests --gtest_print_time=1 --gtest_filter=-*IE_GPU*:*FrontEndLoadFromTest.testLoadFromTwoStreams*:*FrontEndLoadFromTest.testLoadFromTwoFiles* \
      #           --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-ONNXFrontend.xml

      - name: TensorFlow Common tests
        if: ${{ always() }}
        run: |
          source ${{ env.INSTALL_DIR }}/setupvars.sh
          ${{ env.INSTALL_TEST_DIR }}/ov_tensorflow_common_tests --gtest_print_time=1 \
                --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-TensorFlowCommonFrontend.xml

      - name: TensorFlow frontend tests
        if: ${{ always() }}
        run: |
          source ${{ env.INSTALL_DIR }}/setupvars.sh
          ${{ env.INSTALL_TEST_DIR }}/ov_tensorflow_frontend_tests --gtest_print_time=1 \
                --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-TensorFlowFrontend.xml

      - name: TensorFlow Lite frontend tests
        if: ${{ always() }}
        run: |
          source ${{ env.INSTALL_DIR }}/setupvars.sh
          ${{ env.INSTALL_TEST_DIR }}/ov_tensorflow_lite_frontend_tests --gtest_print_time=1 \
                --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-TensorFlowLiteFrontend.xml

      - name: Transformations Tests
        if: ${{ always() }}
        run: |
          source ${{ env.INSTALL_DIR }}/setupvars.sh
          ${{ env.INSTALL_TEST_DIR }}/ov_transformations_tests --gtest_print_time=1 \
                --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-Transformations.xml

      - name: Common test utils tests
        if: ${{ always() }}
        run: |
          source ${{ env.INSTALL_DIR }}/setupvars.sh
          ${{ env.INSTALL_TEST_DIR }}/ov_util_tests --gtest_print_time=1 \
                --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-commonUtilsTests.xml

      - name: CPU plugin unit tests
        if: ${{ always() }}
        run: |
          source ${{ env.INSTALL_DIR }}/setupvars.sh
          ${{ env.INSTALL_TEST_DIR }}/ov_cpu_unit_tests --gtest_print_time=1 \
                --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-CPUUnitTests.xml

      # Disabled in Azure: https://github.com/openvinotoolkit/openvino/blob/master/.ci/azure/linux.yml#L409
      # - name: GNA plugin unit tests
      #   run: |
      #     source ${{ env.INSTALL_DIR }}/setupvars.sh
      #     ${{ env.INSTALL_TEST_DIR }}/ov_gna_unit_tests --gtest_print_time=1 \
      #           --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-GNAUnitTests.xml

      - name: AUTO UT
        if: ${{ always() }}
        run: |
          source ${{ env.INSTALL_DIR }}/setupvars.sh
          ${{ env.INSTALL_TEST_DIR }}/ov_auto_unit_tests --gtest_print_time=1 \
                --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-ov_auto_unit_tests.xml

      - name: Template plugin tests
        if: ${{ always() }}
        run: |
          source ${{ env.INSTALL_DIR }}/setupvars.sh
          ${{ env.INSTALL_TEST_DIR }}/ov_template_func_tests --gtest_print_time=1 \
                --gtest_filter=*smoke* \
                --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-TemplateFuncTests.xml

      - name: Inference Engine C API tests
        if: ${{ always() }}
        run: |
          source ${{ env.INSTALL_DIR }}/setupvars.sh
          ${{ env.INSTALL_TEST_DIR }}/InferenceEngineCAPITests --gtest_print_time=1 \
                --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-InferenceEngineCAPITests.xml

      - name: OpenVINO C API tests
        if: ${{ always() }}
        run: |
          source ${{ env.INSTALL_DIR }}/setupvars.sh
          ${{ env.INSTALL_TEST_DIR }}/ov_capi_test --gtest_print_time=1 \
                --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-OpenVINOCAPITests.xml

      - name: AutoBatch FuncTests
        if: ${{ always() }}
        run: |
          source ${{ env.INSTALL_DIR }}/setupvars.sh
          ${{ env.INSTALL_TEST_DIR }}/ov_auto_batch_func_tests --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-ov_auto_batch_func_tests.xml

      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        if: ${{ always() }}
        with:
          name: test-results-cpp
          path: ${{ env.INSTALL_TEST_DIR }}/TEST*.xml
          if-no-files-found: 'error'

  Python_Unit_Tests:
    needs: Build
    if: ${{ always() }}
    defaults:
      run:
        shell: bash
    runs-on: macos-12
    env:
      OPENVINO_REPO: ${{ github.workspace }}/openvino
      OPENVINO_CONTRIB_REPO: ${{ github.workspace }}/openvino_contrib
      INSTALL_DIR: ${{ github.workspace }}/install
      INSTALL_TEST_DIR: ${{ github.workspace }}/install/tests
      SAMPLES_INSTALL_DIR: ${{ github.workspace }}/install/samples
      LAYER_TESTS_INSTALL_DIR: ${{ github.workspace }}/install/tests/layer_tests
      BUILD_DIR: ${{ github.workspace }}/build
      DATA_PATH: ${{ github.workspace }}/testdata
      MODELS_PATH: ${{ github.workspace }}/testdata
      OV_TEMP: ${{ github.workspace }}/openvino_temp
      PYTHON_STATIC_ARGS: -m "not dynamic_library and not template_plugin"

    steps:
      - name: Create Directories
        run: |
          mkdir -p ${{ env.INSTALL_DIR }} ${{ env.INSTALL_TEST_DIR }}

      - name: Clone OpenVINO
        uses: actions/checkout@v3
        with:
          repository: 'pavel-esir/openvino'
          ref: 'debug_mac'
          path: 'openvino'
          submodules: 'recursive'

      #
      # Dependencies
      #

#      - name: Install dependencies
#        run: |
#          sudo -E apt update
#          sudo -E apt --assume-yes install openjdk-11-jdk libbz2-dev clang unzip libpugixml-dev libtbb-dev intel-opencl-icd ocl-icd-opencl-dev opencl-headers

      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install python dependencies
        run: |
          # For Python API
          python3 -m pip install --upgrade pip
          python3 -m pip install -r ${{ env.OPENVINO_REPO }}/src/bindings/python/wheel/requirements-dev.txt
          python3 -m pip install -r ${{ env.OPENVINO_REPO }}/src/bindings/python/requirements.txt

          # For running Python API tests
          python3 -m pip install -r ${{ env.OPENVINO_REPO }}/src/bindings/python/src/compatibility/openvino/requirements-dev.txt

          # For running ONNX frontend unit tests
          python3 -m pip install --force-reinstall -r ${{ env.OPENVINO_REPO }}/src/frontends/onnx/tests/requirements.txt

          # For running TensorFlow frontend unit tests
          python3 -m pip install -r ${{ env.OPENVINO_REPO }}/src/frontends/tensorflow/tests/requirements.txt

          # For running Paddle frontend unit tests
          python3 -m pip install -r ${{ env.OPENVINO_REPO }}/src/frontends/paddle/tests/requirements.txt

      - name: Install MO dependencies
        run: |
          python3 -m pip install -r ${{ env.OPENVINO_REPO }}/tools/mo/requirements_mxnet.txt
          python3 -m pip install -r ${{ env.OPENVINO_REPO }}/tools/mo/requirements_caffe.txt
          python3 -m pip install -r ${{ env.OPENVINO_REPO }}/tools/mo/requirements_kaldi.txt
          python3 -m pip install -r ${{ env.OPENVINO_REPO }}/tools/mo/requirements_onnx.txt
          python3 -m pip install -r ${{ env.OPENVINO_REPO }}/tools/mo/requirements_tf2.txt
          python3 -m pip install -r ${{ env.OPENVINO_REPO }}/tools/mo/requirements_dev.txt

      - name: Download OpenVINO package
        uses: actions/download-artifact@v3
        with:
          name: openvino_package
          path: ${{ env.INSTALL_DIR }}

      - name: Download OpenVINO tests package
        uses: actions/download-artifact@v3
        with:
          name: openvino_tests
          path: ${{ env.INSTALL_TEST_DIR }}

      - name: Extract OpenVINO packages
        run: |
          pushd ${{ env.INSTALL_DIR }}
            tar -xzf openvino_package.tar.gz -C ${{ env.INSTALL_DIR }} && rm openvino_package.tar.gz || exit 1
          popd

          pushd ${{ env.INSTALL_TEST_DIR }}
            tar -xzf openvino_tests.tar.gz -C ${{ env.INSTALL_DIR }} && rm openvino_tests.tar.gz || exit 1
          popd

      - name: Install Python wheels
        run: |
          python3 -m pip install openvino-dev --find-links=${{ env.INSTALL_DIR }}/tools

      - name: nGraph and IE Python Bindings Tests
        if: ${{ always() }}
        run: |
          source ${{ env.INSTALL_DIR }}/setupvars.sh
          python3 -m pytest -s ${{ env.INSTALL_TEST_DIR }}/pyngraph  ${{ env.PYTHON_STATIC_ARGS }} \
            --junitxml=${{ env.INSTALL_TEST_DIR }}/TEST-Pyngraph.xml \
            --ignore=${{ env.INSTALL_TEST_DIR }}/pyngraph/tests/test_onnx/test_zoo_models.py \
            --ignore=${{ env.INSTALL_TEST_DIR }}/pyngraph/tests/test_onnx/test_backend.py

      - name: Python API 2.0 Tests
        if: ${{ always() }}
        run: |
          # For python imports to import pybind_mock_frontend
          python3 -m pip install -r ${{ env.LAYER_TESTS_INSTALL_DIR }}/requirements.txt
          export PYTHONPATH=${{ env.INSTALL_TEST_DIR }}:$PYTHONPATH
          source ${{ env.INSTALL_DIR }}/setupvars.sh

          python3 -m pytest -sv ${{ env.INSTALL_TEST_DIR }}/pyopenvino ${{ env.PYTHON_STATIC_ARGS }} \
            --junitxml=${{ env.INSTALL_TEST_DIR }}/TEST-Pyngraph.xml \
            --ignore=${{ env.INSTALL_TEST_DIR }}/pyopenvino/tests/test_utils/test_utils.py \
            --ignore=${{ env.INSTALL_TEST_DIR }}/pyopenvino/tests/test_onnx/test_zoo_models.py \
            --ignore=${{ env.INSTALL_TEST_DIR }}/pyopenvino/tests/test_onnx/test_backend.py

      - name: MO Python API Tests
        if: ${{ always() }}
        run: |
          python3 -m pip install -r ${{ env.LAYER_TESTS_INSTALL_DIR }}/requirements.txt
          export PYTHONPATH=${{ env.LAYER_TESTS_INSTALL_DIR }}:$PYTHONPATH
          source ${{ env.INSTALL_DIR }}/setupvars.sh

          python3 -m pytest ${{ env.LAYER_TESTS_INSTALL_DIR }}/mo_python_api_tests/ --junitxml=${{ env.INSTALL_TEST_DIR }}/TEST-test_mo_convert.xml
        env:
          TEST_DEVICE: CPU

      - name: Model Optimizer UT
        if: ${{ always() }}
        run: |

          export PYTHONPATH=${{ env.OPENVINO_REPO }}/tools/mo/:${{ env.LAYER_TESTS_INSTALL_DIR }}:${{ env.INSTALL_TEST_DIR }}:$PYTHONPATH

          # TODO: figure out why they need to be reinstalled
          python3 -m pip install -r ${{ env.OPENVINO_REPO }}/tools/mo/requirements_mxnet.txt
          python3 -m pip install -r ${{ env.OPENVINO_REPO }}/tools/mo/requirements_caffe.txt
          python3 -m pip install -r ${{ env.OPENVINO_REPO }}/tools/mo/requirements_kaldi.txt
          python3 -m pip install -r ${{ env.OPENVINO_REPO }}/tools/mo/requirements_onnx.txt
          python3 -m pip install -r ${{ env.OPENVINO_REPO }}/tools/mo/requirements_tf2.txt
          python3 -m pip install -r ${{ env.OPENVINO_REPO }}/tools/mo/requirements_dev.txt

          source ${{ env.INSTALL_DIR }}/setupvars.sh

          python3 -m pytest -s ${{ env.INSTALL_TEST_DIR }}/mo/unit_tests \
              --junitxml=${{ env.INSTALL_TEST_DIR }}/TEST-ModelOptimizer.xml

      - name: PyTorch Layer Tests
        if: ${{ always() }}
        run: |
          python3 -m pip install -r ${{ env.LAYER_TESTS_INSTALL_DIR }}/requirements.txt
          export PYTHONPATH=${{ env.OPENVINO_REPO }}/tools/mo/:${{ env.LAYER_TESTS_INSTALL_DIR }}:$PYTHONPATH
          source ${{ env.INSTALL_DIR }}/setupvars.sh

          python3 -m pytest ${{ env.LAYER_TESTS_INSTALL_DIR }}/pytorch_tests -m precommit --junitxml=${{ env.INSTALL_TEST_DIR }}/TEST-pytorch.xml
        env:
          TEST_DEVICE: CPU

      - name: Check Files
        if: ${{ always() }}
        run: |
          ls -la ${{ github.workspace }}
          echo "11111"
          ls -laR ${{ github.workspace }}

      - name: TensorFlow 1 Layer Tests - TF FE
        if: ${{ always() }}
        run: |
          python3 -m pip install -r ${{ env.LAYER_TESTS_INSTALL_DIR }}/requirements.txt

          export PYTHONPATH=${{ env.OPENVINO_REPO }}/tools/mo/:${{ env.LAYER_TESTS_INSTALL_DIR }}:$PYTHONPATH

          source ${{ env.INSTALL_DIR }}/setupvars.sh

          python3 -m pytest ${{ env.LAYER_TESTS_INSTALL_DIR }}/tensorflow_tests/ --use_new_frontend -m precommit_tf_fe --junitxml=${{ env.INSTALL_TEST_DIR }}/TEST-tf_fe.xml
        env:
          TEST_DEVICE: CPU

      - name: TensorFlow 2 Layer Tests - TF FE
        if: ${{ always() }}
        run: |
          python3 -m pip install -r ${{ env.LAYER_TESTS_INSTALL_DIR }}/requirements.txt
          export PYTHONPATH=${{ env.OPENVINO_REPO }}/tools/mo/:${{ env.LAYER_TESTS_INSTALL_DIR }}:$PYTHONPATH

          source ${{ env.INSTALL_DIR }}/setupvars.sh

          python3 -m pytest ${{ env.LAYER_TESTS_INSTALL_DIR }}/tensorflow2_keras_tests/ --use_new_frontend -m precommit_tf_fe --junitxml=${{ env.INSTALL_TEST_DIR }}/TEST-tf2_fe.xml
        env:
          TEST_DEVICE: CPU

      - name: TensorFlow 1 Layer Tests - Legacy FE
        if: ${{ always() }}
        run: |
          python3 -m pip install -r ${{ env.LAYER_TESTS_INSTALL_DIR }}/requirements.txt
          export PYTHONPATH=${{ env.OPENVINO_REPO }}/tools/mo/:${{ env.LAYER_TESTS_INSTALL_DIR }}:$PYTHONPATH
          source ${{ env.INSTALL_DIR }}/setupvars.sh

          python3 -m pytest ${{ env.LAYER_TESTS_INSTALL_DIR }}/tensorflow_tests/test_tf_Roll.py --ir_version=10 --junitxml=${{ env.INSTALL_TEST_DIR }}/TEST-tf_Roll.xml

      - name: TensorFlow 2 Layer Tests - Legacy FE
        if: ${{ always() }}
        run: |
          python3 -m pip install -r ${{ env.LAYER_TESTS_INSTALL_DIR }}/requirements.txt
          export PYTHONPATH=${{ env.OPENVINO_REPO }}/tools/mo/:${{ env.LAYER_TESTS_INSTALL_DIR }}:$PYTHONPATH
          source ${{ env.INSTALL_DIR }}/setupvars.sh

          python3 -m pytest ${{ env.LAYER_TESTS_INSTALL_DIR }}/tensorflow2_keras_tests/test_tf2_keras_activation.py \
              --ir_version=11 --junitxml=${{ env.INSTALL_TEST_DIR }}/TEST-tf2_Activation.xml -k "sigmoid"
        env:
          TEST_DEVICE: CPU

      - name: TensorFlow Lite Layer Tests - TFL FE
        if: ${{ always() }}
        run: |
          python3 -m pip install -r ${{ env.LAYER_TESTS_INSTALL_DIR }}/requirements.txt
          export PYTHONPATH=${{ env.OPENVINO_REPO }}/tools/mo/:${{ env.LAYER_TESTS_INSTALL_DIR }}:$PYTHONPATH
          source ${{ env.INSTALL_DIR }}/setupvars.sh

          python3 -m pytest ${{ env.LAYER_TESTS_INSTALL_DIR }}/tensorflow_lite_tests/ --junitxml=${{ env.INSTALL_TEST_DIR }}/TEST-tfl_fe.xml
        env:
          TEST_DEVICE: CPU

      - name: Python Frontend tests
        if: ${{ always() }}
        run: |
          python3 -m pip install -r ${{ env.LAYER_TESTS_INSTALL_DIR }}/requirements.txt
          export PYTHONPATH=${{ env.OPENVINO_REPO }}/tools/mo/:${{ env.LAYER_TESTS_INSTALL_DIR }}:$PYTHONPATH
          source ${{ env.INSTALL_DIR }}/setupvars.sh

          python3 -m pytest ${{ env.LAYER_TESTS_INSTALL_DIR }}/py_frontend_tests --junitxml=${{ env.INSTALL_TEST_DIR }}/TEST-test_py_fontend.xml

      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        if: ${{ always() }}
        with:
          name: test-results-python
          path: ${{ env.INSTALL_TEST_DIR }}/TEST*.xml
          if-no-files-found: 'error'

      - name: Upload Debug Results
        uses: actions/upload-artifact@v3
        if: ${{ always() }}
        with:
          name: debug-results-python
          path: |
            ${{ github.workspace }}/**/saved_for_debug*
          if-no-files-found: 'error'

      - name: Upload Debug Results 2
        uses: actions/upload-artifact@v3
        if: ${{ always() }}
        with:
          name: debug-results-python-2
          path: ${{ github.workspace }}/saved_for_debug*
          if-no-files-found: 'error'

  CPU_Functional_Tests:
    needs: Build
    if: ${{ always() }}
    defaults:
      run:
        shell: bash
    runs-on: macos-12
    env:
      INSTALL_DIR: ${{ github.workspace }}/install
      INSTALL_TEST_DIR: ${{ github.workspace }}/install/tests

    steps:
      - name: Create Directories
        run: mkdir -p ${{ env.INSTALL_DIR }} ${{ env.INSTALL_TEST_DIR }}

#      - name: Install dependencies
#        run: |
#          sudo -E apt update
#          sudo -E apt --assume-yes install openjdk-11-jdk libbz2-dev clang unzip libpugixml-dev libtbb-dev intel-opencl-icd ocl-icd-opencl-dev opencl-headers

      - name: Download OpenVINO package
        uses: actions/download-artifact@v3
        with:
          name: openvino_package
          path: ${{ env.INSTALL_DIR }}

      - name: Download OpenVINO tests package
        uses: actions/download-artifact@v3
        with:
          name: openvino_tests
          path: ${{ env.INSTALL_TEST_DIR }}

      - name: Extract OpenVINO packages
        run: |
          pushd ${{ env.INSTALL_DIR }}
            tar -xzf openvino_package.tar.gz -C ${{ env.INSTALL_DIR }} && rm openvino_package.tar.gz || exit 1
          popd
          pushd ${{ env.INSTALL_TEST_DIR }}
            tar -xzf openvino_tests.tar.gz -C ${{ env.INSTALL_DIR }} && rm openvino_tests.tar.gz || exit 1
          popd

      - name: Intel CPU plugin func tests
        run: |
          source ${{ env.INSTALL_DIR }}/setupvars.sh
          ${{ env.INSTALL_TEST_DIR }}/ov_cpu_func_tests --gtest_print_time=1 --gtest_filter=*smoke* --gtest_output=xml:"${{ env.INSTALL_TEST_DIR }}/TEST-CPUFuncTests.xml"

      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        if: ${{ always() }}
        with:
          name: test-results-functional-cpu
          path: ${{ env.INSTALL_TEST_DIR }}/TEST*.xml
          if-no-files-found: 'error'
