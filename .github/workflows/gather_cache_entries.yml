name: Gathering Cache Entries
on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main

jobs:
  Gather_Cache_Entries:
    defaults:
      run:
        shell: bash
    runs-on: ubuntu-latest
    env:
      ARTIFACTS_DIR: ${{ github.workspace }}/artifacts
      CONFORMANCE_TOOLS_DIR: ${{ github.workspace }}/install/tests/functional_test_utils/layer_tests_summary
      TEST_DEVICE: 'CPU'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create Artifacts Directory
        run: mkdir -p ${{ env.ARTIFACTS_DIR }} ${{ env.CONFORMANCE_TOOLS_DIR }}

      - name: Show Context
        uses: actions/github-script@v6
        with:
          script: |
            console.log(context)
            console.log(context.payload.repository.full_name)
            console.log(context.payload.repository.organization)
            console.log(context.payload.repository.name)

      - uses: actions/setup-node@v3
        with:
          node-version: 16

      - run: npm install @actions/cache
      
      - name: Gather Workflows Data
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            
            // const restorePath = ['${{ env.CONFORMANCE_TOOLS_DIR }}/expected_failures_${{ env.TEST_DEVICE }}.csv']
            
            const cache = require('@actions/cache');
            // const key = 'Linux-conformance-OP-expected-failures-CPU'
            // const cacheKey = await cache.restoreCache(restorePath, key, restoreKeys)
            // console.log(cacheKey)
            
            const org = context.payload.organization.login
            const repositoryName = context.payload.repository.name
            
            const conformanceCacheEntries = await github.rest.actions.getActionsCacheList({
              'owner': org,
              'repo': repositoryName,
              'key': 'Linux-conformance'
            })
            console.log(JSON.stringify(conformanceCacheEntries))
            
            // Download all cache entries
            for (const cacheEntryInfo of conformanceCacheEntries.data.actions_caches) {
              const cacheKey = cacheEntryInfo.key
              const restorePath = `${{ env.CONFORMANCE_TOOLS_DIR }}/${cacheKey}`
            
              fs.mkdir(`${{ env.CONFORMANCE_TOOLS_DIR }}/${cacheKey}`, { recursive: true }, (err) => {
                if (err) throw err;
              });
            
              const restoredCacheKey = await cache.restoreCache([restorePath], cacheKey, [])
              
              if (restoredCacheKey) {
                console.log(`${cacheKey} was restored to ${restorePath}.`)
              }
            }

      - name: Check Restoration
        run: ls -laR ${{ env.CONFORMANCE_TOOLS_DIR }}

