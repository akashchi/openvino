name: OpenVINO Tokenizers

on:
  workflow_call:
    inputs:
      runner:
        description: 'Machine on which the tests would run'
        type: string
        required: true
      container:
        description: 'JSON to be converted to the value of the "container" configuration for the job'
        type: string
        required: false
        default: '{"image": null}'

env:
  PIP_CACHE_PATH: /mount/caches/pip/linux
  PYTHON_VERSION: '3.11'

jobs:
  OpenVINO_Tokenizers:
    name: OpenVINO Tokenizers
    timeout-minutes: 25
    runs-on: ${{ inputs.runner }}
    container:
      image: ${{ inputs.image }}
    defaults:
      run:
        shell: bash
    env:
      DEBIAN_FRONTEND: noninteractive # to prevent apt-get from waiting user input
      INSTALL_DIR: ${{ github.workspace }}/install
      OPENVINO_TOKENIZERS_REPO: ${{ github.workspace }}/openvino_tokenizers
      EXTENSION_BUILD_DIR: ${{ github.workspace }}/build
    steps:
      - name: Set apt retries
        if: runner.os == 'Linux'
        run: echo 'Acquire::Retries "10";' > /etc/apt/apt.conf.d/80-retries

      - name: Download OpenVINO package
        uses: actions/download-artifact@v4
        with:
          name: openvino_package
          path: ${{ env.INSTALL_DIR }}

      # Needed as ${{ github.workspace }} is not working correctly when using Docker
      - name: Setup Variables
        if: ${{ startsWith(inputs.runner, 'aks') }}
        run: |
          echo "INSTALL_DIR=$GITHUB_WORKSPACE/install" >> "$GITHUB_ENV"
          echo "OPENVINO_TOKENIZERS_REPO=$GITHUB_WORKSPACE/openvino_tokenizers" >> "$GITHUB_ENV"
          echo "EXTENSION_BUILD_DIR=$GITHUB_WORKSPACE/build" >> "$GITHUB_ENV"

      - name: Extract OpenVINO packages
        run: |
          pushd $INSTALL_DIR
            tar -xzf openvino_package.tar.gz -C $INSTALL_DIR
          popd

        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github/actions/setup_python
            install_build_dependencies.sh
          path: 'openvino'

      - name: Setup Python ${{ env.PYTHON_VERSION }}
        uses: ./.github/actions/setup_python
        with:
          version: ${{ env.PYTHON_VERSION }}
          pip-cache-path: ${{ startsWith(inputs.runner, 'aks') && env.PIP_CACHE_PATH || '' }}
          should-setup-pip-paths: ${{ startsWith(inputs.runner, 'aks') }}
          self-hosted-runner: ${{ startsWith(inputs.runner, 'aks') }}
          show-cache-info: 'false'

      - name: Clone OpenVINO Tokenizers
        uses: actions/checkout@v4
        with:
          repository: 'openvinotoolkit/openvino_tokenizers'
          path: ${{ env.OPENVINO_TOKENIZERS_REPO }}
          ref: 'master'

      #
      # Dependencies
      #

      - name: Install build dependencies
        if: runner.os == 'Linux'
        run: ./install_build_dependencies.sh

      - name: Install python dependencies
        run: |
          # wheel packaging
          python3 -m pip install -r ${OPENVINO_TOKENIZERS_REPO}/requirements-build.txt

      #
      # Build
      #

      - name: Build tokenizers wheel
        run: |
          source ${INSTALL_DIR}/setupvars.sh
          python -m build --wheel --outdir ${EXTENSION_BUILD_DIR} ${OPENVINO_TOKENIZERS_REPO}
        env:
          CMAKE_ARGS: '-DBUILD_FAST_TOKENIZERS=OFF'
          CMAKE_BUILD_PARALLEL_LEVEL: '4'
          CMAKE_GENERATOR: 'Unix Makefiles'

      #
      # Upload build artifacts
      #

      - name: Upload openvino tokenizers wheel
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: openvino_tokenizers_wheel
          path: ${{ env.EXTENSION_BUILD_DIR }}/*.whl
          if-no-files-found: 'error'
